name: PR Version Check

on:
  pull_request:
    types: [opened, synchronize, reopened, edited]
    branches:
      - main

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  validate-and-label:
    name: Validate PR Title and Add Labels
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Validate PR title and determine version bump
        id: validate
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.issue.number;
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
            });

            const title = pr.title;
            const body = pr.body || '';

            // Validation logic
            const validTypes = ['feat', 'fix', 'docs', 'style', 'refactor', 'perf', 'test', 'chore', 'ci', 'build'];
            const conventionalCommitRegex = /^(feat|fix|docs|style|refactor|perf|test|chore|ci|build)(\(.+?\))?(!)?:\s*.+/;

            const match = title.match(conventionalCommitRegex);

            if (!match) {
              const errorMessage = `❌ **Invalid PR Title**\n\nYour PR title must follow the [Conventional Commits](https://www.conventionalcommits.org/) format.\n\n**Expected format:** \`type(scope)?: description\`\n\n**Examples:**\n- \`feat: add query cache\`\n- \`fix(mysql): connection timeout\`\n- \`feat!: remove legacy API\` (breaking change)\n\n**Valid types:** ${validTypes.join(', ')}\n\n**Current title:** \`${title}\`\n\nPlease update your PR title to proceed.`;

              // Find existing bot comment
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
              });

              const botComment = comments.find(comment =>
                comment.user.type === 'Bot' &&
                comment.body.includes('Invalid PR Title')
              );

              if (botComment) {
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id,
                  body: errorMessage,
                });
              } else {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body: errorMessage,
                });
              }

              core.setFailed('PR title does not follow Conventional Commits format');
              return;
            }

            const [, type, scope, breaking] = match;
            const hasBreakingChange = !!breaking || body.includes('BREAKING CHANGE:');

            // Determine version bump
            let bumpType = 'none';
            if (hasBreakingChange) {
              bumpType = 'major';
            } else if (type === 'feat') {
              bumpType = 'minor';
            } else if (type === 'fix' || type === 'perf') {
              bumpType = 'patch';
            }

            // Store for next steps
            core.setOutput('bump_type', bumpType);
            core.setOutput('is_breaking', hasBreakingChange);
            core.setOutput('type', type);
            core.setOutput('valid', 'true');

            console.log(`✅ Valid PR title`);
            console.log(`Type: ${type}`);
            console.log(`Breaking: ${hasBreakingChange}`);
            console.log(`Version bump: ${bumpType}`);

      - name: Remove old version labels
        if: steps.validate.outputs.valid == 'true'
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          script: |
            const prNumber = context.issue.number;
            const oldLabels = ['version:major', 'version:minor', 'version:patch', 'version:none'];

            for (const label of oldLabels) {
              try {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  name: label,
                });
              } catch (error) {
                // Label doesn't exist, ignore
              }
            }

      - name: Add version label
        if: steps.validate.outputs.valid == 'true'
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          script: |
            const bumpType = '${{ steps.validate.outputs.bump_type }}';
            const prNumber = context.issue.number;

            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              labels: [`version:${bumpType}`],
            });

      - name: Handle breaking change
        if: steps.validate.outputs.is_breaking == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.issue.number;

            // Add breaking-change label
            try {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                labels: ['breaking-change', 'needs-approval'],
              });
            } catch (error) {
              console.log('Labels may not exist, continuing...');
            }

            // Check if already approved
            const { data: labels } = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            const hasApproval = labels.some(label => label.name === 'approved-breaking-change');

            if (!hasApproval) {
              // Post warning comment
              const warningMessage = `⚠️ **Breaking Change Detected**\n\nThis PR introduces a breaking change and requires special approval.\n\n**Required action:** A maintainer must add the \`approved-breaking-change\` label before this PR can be merged.\n\n**Breaking changes should:**\n- Be clearly documented in the PR description\n- Include migration instructions\n- Be discussed with the team\n\nPlease ensure all breaking changes are intentional and properly communicated.`;

              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
              });

              const existingWarning = comments.find(comment =>
                comment.user.type === 'Bot' &&
                comment.body.includes('Breaking Change Detected')
              );

              if (!existingWarning) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body: warningMessage,
                });
              }

              core.setFailed('Breaking change requires approved-breaking-change label');
            }

      - name: Generate version preview
        if: steps.validate.outputs.valid == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.issue.number;
            const bumpType = '${{ steps.validate.outputs.bump_type }}';
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
            });

            // Read current version from package.json
            const { data: packageJson } = await github.rest.repos.getContent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: 'package.json',
              ref: pr.base.ref,
            });

            const content = Buffer.from(packageJson.content, 'base64').toString();
            const pkg = JSON.parse(content);
            const currentVersion = pkg.version;

            // Calculate new version
            let newVersion = currentVersion;
            if (bumpType !== 'none') {
              const [major, minor, patch] = currentVersion.split('.').map(Number);

              if (bumpType === 'major') {
                newVersion = `${major + 1}.0.0`;
              } else if (bumpType === 'minor') {
                newVersion = `${major}.${minor + 1}.0`;
              } else if (bumpType === 'patch') {
                newVersion = `${major}.${minor}.${patch + 1}`;
              }
            }

            // Generate changelog preview
            const title = pr.title;
            const type = '${{ steps.validate.outputs.type }}';

            const sectionMap = {
              feat: 'Added',
              fix: 'Fixed',
              perf: 'Performance',
              docs: 'Documentation',
              refactor: 'Changed',
            };

            const section = sectionMap[type] || 'Changed';

            let preview = `## 🤖 Version Bump Preview\n\n`;
            preview += `**Current version:** ${currentVersion}\n`;

            if (bumpType === 'none') {
              preview += `**Version bump:** None (documentation/maintenance change)\n`;
              preview += `\n**Note:** This change will be added to the changelog but won't trigger a version bump.\n\n`;
            } else {
              preview += `**New version:** ${newVersion} (${bumpType})\n\n`;
            }

            preview += `**Changelog entry:**\n\`\`\`markdown\n`;
            if (bumpType !== 'none') {
              preview += `## [${newVersion}] - $(date)\n\n`;
            }
            preview += `### ${section}\n`;
            preview += `- ${title.split(':')[1].trim()} (#${prNumber})\n`;
            preview += `\`\`\`\n\n`;
            preview += `This will be automatically applied when merged to main.`;

            // Find and update or create comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('Version Bump Preview')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: preview,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: preview,
              });
            }

      - name: Set status check
        if: steps.validate.outputs.valid == 'true' && steps.validate.outputs.is_breaking != 'true'
        run: echo "✅ PR title is valid and ready for merge"

      - name: Summary
        if: steps.validate.outputs.valid == 'true'
        run: |
          echo "### ✅ PR Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Type:** ${{ steps.validate.outputs.type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version bump:** ${{ steps.validate.outputs.bump_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Breaking change:** ${{ steps.validate.outputs.is_breaking }}" >> $GITHUB_STEP_SUMMARY
