name: PR Auto-Labeling

on:
  pull_request:
    types: [opened, reopened, synchronize]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  auto-label:
    name: Auto-label PR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Add size label
        uses: actions/github-script@v7
        with:
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            const additions = files.reduce((sum, file) => sum + file.additions, 0);
            const deletions = files.reduce((sum, file) => sum + file.deletions, 0);
            const totalChanges = additions + deletions;

            let sizeLabel = '';
            if (totalChanges < 10) {
              sizeLabel = 'size:XS';
            } else if (totalChanges < 50) {
              sizeLabel = 'size:S';
            } else if (totalChanges < 200) {
              sizeLabel = 'size:M';
            } else if (totalChanges < 500) {
              sizeLabel = 'size:L';
            } else {
              sizeLabel = 'size:XL';
            }

            try {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: [sizeLabel]
              });
            } catch (error) {
              console.log('Size labels may not exist, skipping...');
            }

      - name: Add type labels based on files changed
        uses: actions/github-script@v7
        with:
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            const labels = new Set();

            for (const file of files) {
              const filename = file.filename;

              if (filename.includes('test/') || filename.includes('.test.')) {
                labels.add('type:test');
              }
              if (filename.includes('docs/') || filename.endsWith('.md')) {
                labels.add('type:documentation');
              }
              if (filename.includes('package.json') || filename.includes('package-lock.json')) {
                labels.add('type:dependencies');
              }
              if (filename.includes('.github/workflows/')) {
                labels.add('type:ci');
              }
              if (filename.includes('src/adapters/')) {
                labels.add('area:database');
              }
              if (filename.includes('src/services/ai')) {
                labels.add('area:ai');
              }
              if (filename.includes('webviews/') || filename.includes('media/')) {
                labels.add('area:ui');
              }
              if (filename.includes('.sql')) {
                labels.add('type:sql');
              }
            }

            if (labels.size > 0) {
              try {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  labels: Array.from(labels)
                });
              } catch (error) {
                console.log('Some labels may not exist, skipping...');
              }
            }

      # Note: Breaking change detection and version labeling is now handled
      # by the pr-version-check.yml workflow for PRs targeting main branch
